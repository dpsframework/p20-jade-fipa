package org.omg.PortableServer;


/**
* org/omg/PortableServer/ServantActivatorPOATie.java .
* Generated by the IDL-to-Java compiler (portable), version "3.2"
* from /Users/russgold/projects/glassfish/glassfish-corba/target/checkout/omgapi/src/main/idl/poa.idl
* Friday, July 14, 2017 11:15:15 AM EDT
*/


/**
         * When the POA has the RETAIN policy it uses servant 
         * managers that are ServantActivators. 
         */
public class ServantActivatorPOATie extends ServantActivatorPOA
{

  // Constructors

  public ServantActivatorPOATie ( org.omg.PortableServer.ServantActivatorOperations delegate ) {
      this._impl = delegate;
  }
  public ServantActivatorPOATie ( org.omg.PortableServer.ServantActivatorOperations delegate , org.omg.PortableServer.POA poa ) {
      this._impl = delegate;
      this._poa      = poa;
  }
  public org.omg.PortableServer.ServantActivatorOperations _delegate() {
      return this._impl;
  }
  public void _delegate (org.omg.PortableServer.ServantActivatorOperations delegate ) {
      this._impl = delegate;
  }
  public org.omg.PortableServer.POA _default_POA() {
      if(_poa != null) {
          return _poa;
      }
      else {
          return super._default_POA();
      }
  }

  /**
           * This operation is invoked by the POA whenever the 
           * POA receives a request for an object that is not 
           * currently active, assuming the POA has the 
           * USE_SERVANT_MANAGER and RETAIN policies.
           * @param oid object Id associated with the object on 
           *            the request was made.
           * @param adapter object reference for the POA in which
           *                the object is being activated.
           * @return Servant corresponding to oid is created or 
           *         located by the user supplied servant manager.
           * @exception ForwardRequest to indicate to the ORB 
           *            that it is responsible for delivering 
           *            the current request and subsequent 
           *            requests to the object denoted in the 
           *            forward_reference member of the exception.
           */
  public org.omg.PortableServer.Servant incarnate (byte[] oid, org.omg.PortableServer.POA adapter) throws org.omg.PortableServer.ForwardRequest
  {
    return _impl.incarnate(oid, adapter);
  } // incarnate


  /**
           * This operation is invoked whenever a servant for 
           * an object is deactivated, assuming the POA has 
           * the USE_SERVANT_MANAGER and RETAIN policies.
           * @param oid object Id associated with the object 
           *            being deactivated.
           * @param adapter object reference for the POA in which
           *                the object was active.
           * @param serv contains reference to the servant
           *        associated with the object being deactivated.
           * @param cleanup_in_progress if TRUE indicates that
           *        destroy or deactivate is called with 
           *        etherealize_objects param of TRUE.  FALSE
           *        indicates that etherealize was called due to
           *        other reasons.
           * @param remaining_activations indicates whether the
           *        Servant Manager can destroy a servant.  If
           *        set to TRUE, the Servant Manager should wait
           *        until all invocations in progress have
           *        completed.
           */
  public void etherealize (byte[] oid, org.omg.PortableServer.POA adapter, org.omg.PortableServer.Servant serv, boolean cleanup_in_progress, boolean remaining_activations)
  {
    _impl.etherealize(oid, adapter, serv, cleanup_in_progress, remaining_activations);
  } // etherealize

  private org.omg.PortableServer.ServantActivatorOperations _impl;
  private org.omg.PortableServer.POA _poa;

} // class ServantActivatorPOATie
