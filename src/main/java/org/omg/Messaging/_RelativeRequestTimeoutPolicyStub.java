package org.omg.Messaging;


/**
* org/omg/Messaging/_RelativeRequestTimeoutPolicyStub.java .
* Generated by the IDL-to-Java compiler (portable), version "3.2"
* from /Users/russgold/projects/glassfish/glassfish-corba/target/checkout/omgapi/src/main/idl/Messaging.idl
* Friday, July 14, 2017 11:15:15 AM EDT
*/

public class _RelativeRequestTimeoutPolicyStub extends org.omg.CORBA.portable.ObjectImpl implements org.omg.Messaging.RelativeRequestTimeoutPolicy
{

  public long relative_expiry ()
  {
            org.omg.CORBA.portable.InputStream $in = null;
            try {
                org.omg.CORBA.portable.OutputStream $out = _request ("_get_relative_expiry", true);
                $in = _invoke ($out);
                long $result = org.omg.TimeBase.TimeTHelper.read ($in);
                return $result;
            } catch (org.omg.CORBA.portable.ApplicationException $ex) {
                $in = $ex.getInputStream ();
                String _id = $ex.getId ();
                throw new org.omg.CORBA.MARSHAL (_id);
            } catch (org.omg.CORBA.portable.RemarshalException $rm) {
                return relative_expiry (        );
            } finally {
                _releaseReply ($in);
            }
  } // relative_expiry


  /** Return the constant value that corresponds to the 
                  * type of the policy object.  The values of 
                  * the polivy objectys are allocated by the OMG.
                  * New values for PolicyType should be obtained from the OMG by
                  * sending mail to request@omg.org.  In general the constant
                  * values that are allocated are defined in conjunction with
                  * the definition of the corresponding policy object.
                  * @return the constant value that corresponds to the type of
                  * the policy object.
                  */
  public int policy_type ()
  {
            org.omg.CORBA.portable.InputStream $in = null;
            try {
                org.omg.CORBA.portable.OutputStream $out = _request ("_get_policy_type", true);
                $in = _invoke ($out);
                int $result = org.omg.CORBA.PolicyTypeHelper.read ($in);
                return $result;
            } catch (org.omg.CORBA.portable.ApplicationException $ex) {
                $in = $ex.getInputStream ();
                String _id = $ex.getId ();
                throw new org.omg.CORBA.MARSHAL (_id);
            } catch (org.omg.CORBA.portable.RemarshalException $rm) {
                return policy_type (        );
            } finally {
                _releaseReply ($in);
            }
  } // policy_type


  /** Copies the policy object. The copy does not retain any
                  * relationships that the policy had with any domain or object.
                  * @return the copy of the policy object.
                  */
  public org.omg.CORBA.Policy copy ()
  {
            org.omg.CORBA.portable.InputStream $in = null;
            try {
                org.omg.CORBA.portable.OutputStream $out = _request ("copy", true);
                $in = _invoke ($out);
                org.omg.CORBA.Policy $result = org.omg.CORBA.PolicyHelper.read ($in);
                return $result;
            } catch (org.omg.CORBA.portable.ApplicationException $ex) {
                $in = $ex.getInputStream ();
                String _id = $ex.getId ();
                throw new org.omg.CORBA.MARSHAL (_id);
            } catch (org.omg.CORBA.portable.RemarshalException $rm) {
                return copy (        );
            } finally {
                _releaseReply ($in);
            }
  } // copy


  /** Destroys the policy object.  It is the responsibility of
                  * the policy object to determine whether it can be destroyed.
                  */
  public void destroy ()
  {
            org.omg.CORBA.portable.InputStream $in = null;
            try {
                org.omg.CORBA.portable.OutputStream $out = _request ("destroy", true);
                $in = _invoke ($out);
                return;
            } catch (org.omg.CORBA.portable.ApplicationException $ex) {
                $in = $ex.getInputStream ();
                String _id = $ex.getId ();
                throw new org.omg.CORBA.MARSHAL (_id);
            } catch (org.omg.CORBA.portable.RemarshalException $rm) {
                destroy (        );
            } finally {
                _releaseReply ($in);
            }
  } // destroy

  // Type-specific CORBA::Object operations
  private static String[] __ids = {
    "IDL:omg.org/Messaging/RelativeRequestTimeoutPolicy:1.0", 
    "IDL:omg.org/CORBA/Policy:1.0"};

  public String[] _ids ()
  {
    return (String[])__ids.clone ();
  }

  private void readObject (java.io.ObjectInputStream s) throws java.io.IOException
  {
     String str = s.readUTF ();
     String[] args = null;
     java.util.Properties props = null;
     org.omg.CORBA.ORB orb = org.omg.CORBA.ORB.init (args, props);
   try {
     org.omg.CORBA.Object obj = orb.string_to_object (str);
     org.omg.CORBA.portable.Delegate delegate = ((org.omg.CORBA.portable.ObjectImpl) obj)._get_delegate ();
     _set_delegate (delegate);
   } finally {
     orb.destroy() ;
   }
  }

  private void writeObject (java.io.ObjectOutputStream s) throws java.io.IOException
  {
     String[] args = null;
     java.util.Properties props = null;
     org.omg.CORBA.ORB orb = org.omg.CORBA.ORB.init (args, props);
   try {
     String str = orb.object_to_string (this);
     s.writeUTF (str);
   } finally {
     orb.destroy() ;
   }
  }
} // class _RelativeRequestTimeoutPolicyStub
