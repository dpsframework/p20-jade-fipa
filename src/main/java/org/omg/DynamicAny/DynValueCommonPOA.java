package org.omg.DynamicAny;


/**
* org/omg/DynamicAny/DynValueCommonPOA.java .
* Generated by the IDL-to-Java compiler (portable), version "3.2"
* from /Users/russgold/projects/glassfish/glassfish-corba/target/checkout/omgapi/src/main/idl/DynamicAny.idl
* Friday, July 14, 2017 11:15:15 AM EDT
*/


/**
    * DynValueCommon provides operations supported by both the DynValue and DynValueBox interfaces.
    */
public abstract class DynValueCommonPOA extends org.omg.PortableServer.Servant
 implements org.omg.DynamicAny.DynValueCommonOperations, org.omg.CORBA.portable.InvokeHandler
{

  // Constructors

  private static java.util.Hashtable _methods = new java.util.Hashtable ();
  static
  {
    _methods.put ("is_null", new java.lang.Integer (0));
    _methods.put ("set_to_null", new java.lang.Integer (1));
    _methods.put ("set_to_value", new java.lang.Integer (2));
    _methods.put ("type", new java.lang.Integer (3));
    _methods.put ("assign", new java.lang.Integer (4));
    _methods.put ("from_any", new java.lang.Integer (5));
    _methods.put ("to_any", new java.lang.Integer (6));
    _methods.put ("equal", new java.lang.Integer (7));
    _methods.put ("destroy", new java.lang.Integer (8));
    _methods.put ("copy", new java.lang.Integer (9));
    _methods.put ("insert_boolean", new java.lang.Integer (10));
    _methods.put ("insert_octet", new java.lang.Integer (11));
    _methods.put ("insert_char", new java.lang.Integer (12));
    _methods.put ("insert_short", new java.lang.Integer (13));
    _methods.put ("insert_ushort", new java.lang.Integer (14));
    _methods.put ("insert_long", new java.lang.Integer (15));
    _methods.put ("insert_ulong", new java.lang.Integer (16));
    _methods.put ("insert_float", new java.lang.Integer (17));
    _methods.put ("insert_double", new java.lang.Integer (18));
    _methods.put ("insert_string", new java.lang.Integer (19));
    _methods.put ("insert_reference", new java.lang.Integer (20));
    _methods.put ("insert_typecode", new java.lang.Integer (21));
    _methods.put ("insert_longlong", new java.lang.Integer (22));
    _methods.put ("insert_ulonglong", new java.lang.Integer (23));
    _methods.put ("insert_wchar", new java.lang.Integer (24));
    _methods.put ("insert_wstring", new java.lang.Integer (25));
    _methods.put ("insert_any", new java.lang.Integer (26));
    _methods.put ("insert_dyn_any", new java.lang.Integer (27));
    _methods.put ("insert_val", new java.lang.Integer (28));
    _methods.put ("get_boolean", new java.lang.Integer (29));
    _methods.put ("get_octet", new java.lang.Integer (30));
    _methods.put ("get_char", new java.lang.Integer (31));
    _methods.put ("get_short", new java.lang.Integer (32));
    _methods.put ("get_ushort", new java.lang.Integer (33));
    _methods.put ("get_long", new java.lang.Integer (34));
    _methods.put ("get_ulong", new java.lang.Integer (35));
    _methods.put ("get_float", new java.lang.Integer (36));
    _methods.put ("get_double", new java.lang.Integer (37));
    _methods.put ("get_string", new java.lang.Integer (38));
    _methods.put ("get_reference", new java.lang.Integer (39));
    _methods.put ("get_typecode", new java.lang.Integer (40));
    _methods.put ("get_longlong", new java.lang.Integer (41));
    _methods.put ("get_ulonglong", new java.lang.Integer (42));
    _methods.put ("get_wchar", new java.lang.Integer (43));
    _methods.put ("get_wstring", new java.lang.Integer (44));
    _methods.put ("get_any", new java.lang.Integer (45));
    _methods.put ("get_dyn_any", new java.lang.Integer (46));
    _methods.put ("get_val", new java.lang.Integer (47));
    _methods.put ("seek", new java.lang.Integer (48));
    _methods.put ("rewind", new java.lang.Integer (49));
    _methods.put ("next", new java.lang.Integer (50));
    _methods.put ("component_count", new java.lang.Integer (51));
    _methods.put ("current_component", new java.lang.Integer (52));
  }

  public org.omg.CORBA.portable.OutputStream _invoke (String $method,
                                org.omg.CORBA.portable.InputStream in,
                                org.omg.CORBA.portable.ResponseHandler $rh)
  {
    org.omg.CORBA.portable.OutputStream out = null;
    java.lang.Integer __method = (java.lang.Integer)_methods.get ($method);
    if (__method == null)
      throw new org.omg.CORBA.BAD_OPERATION (0, org.omg.CORBA.CompletionStatus.COMPLETED_MAYBE);

    switch (__method.intValue ())
    {

  /**
          * Returns true if the DynValueCommon represents a null value type.
          */
       case 0:  // DynamicAny/DynValueCommon/is_null
       {
         boolean $result = false;
         $result = this.is_null ();
         out = $rh.createReply();
         out.write_boolean ($result);
         break;
       }


  /**
          * Changes the representation of a DynValueCommon to a null value type.
          */
       case 1:  // DynamicAny/DynValueCommon/set_to_null
       {
         this.set_to_null ();
         out = $rh.createReply();
         break;
       }


  /**
          * Replaces a null value type with a newly constructed value. Its components are initialized
          * to default values as in DynAnyFactory.create_dyn_any_from_type_code.
          * If the DynValueCommon represents a non-null value type, then this operation has no effect. 
          */
       case 2:  // DynamicAny/DynValueCommon/set_to_value
       {
         this.set_to_value ();
         out = $rh.createReply();
         break;
       }


  /**
          * Returns the TypeCode associated with this DynAny object.
          * A DynAny object is created with a TypeCode value assigned to it.
          * This TypeCode value determines the type of the value handled through the DynAny object.
          * Note that the TypeCode associated with a DynAny object is initialized at the time the
          * DynAny is created and cannot be changed during lifetime of the DynAny object.
          *
          * @return The TypeCode associated with this DynAny object
          */
       case 3:  // DynamicAny/DynAny/type
       {
         org.omg.CORBA.TypeCode $result = null;
         $result = this.type ();
         out = $rh.createReply();
         out.write_TypeCode ($result);
         break;
       }


  /**
          * Initializes the value associated with a DynAny object with the value
          * associated with another DynAny object.
          * The current position of the target DynAny is set to zero for values that have components
          * and to -1 for values that do not have components.
          *
          * @param dyn_any
          * @exception TypeMismatch if the type of the passed DynAny is not equivalent to the type of target DynAny
          */
       case 4:  // DynamicAny/DynAny/assign
       {
         try {
           org.omg.DynamicAny.DynAny dyn_any = org.omg.DynamicAny.DynAnyHelper.read (in);
           this.assign (dyn_any);
           out = $rh.createReply();
         } catch (org.omg.DynamicAny.DynAnyPackage.TypeMismatch $ex) {
           out = $rh.createExceptionReply ();
           org.omg.DynamicAny.DynAnyPackage.TypeMismatchHelper.write (out, $ex);
         }
         break;
       }


  /**
          * Initializes the value associated with a DynAny object with the value contained in an any.
          * The current position of the target DynAny is set to zero for values that have components
          * and to -1 for values that do not have components.
          *
          * @exception TypeMismatch if the type of the passed Any is not equivalent to the type of target DynAny
          * @exception InvalidValue if the passed Any does not contain a legal value (such as a null string)
          */
       case 5:  // DynamicAny/DynAny/from_any
       {
         try {
           org.omg.CORBA.Any value = in.read_any ();
           this.from_any (value);
           out = $rh.createReply();
         } catch (org.omg.DynamicAny.DynAnyPackage.TypeMismatch $ex) {
           out = $rh.createExceptionReply ();
           org.omg.DynamicAny.DynAnyPackage.TypeMismatchHelper.write (out, $ex);
         } catch (org.omg.DynamicAny.DynAnyPackage.InvalidValue $ex) {
           out = $rh.createExceptionReply ();
           org.omg.DynamicAny.DynAnyPackage.InvalidValueHelper.write (out, $ex);
         }
         break;
       }


  /**
          * Creates an any value from a DynAny object.
          * A copy of the TypeCode associated with the DynAny object is assigned to the resulting any.
          * The value associated with the DynAny object is copied into the any.
          *
          * @return a new Any object with the same value and TypeCode
          */
       case 6:  // DynamicAny/DynAny/to_any
       {
         org.omg.CORBA.Any $result = null;
         $result = this.to_any ();
         out = $rh.createReply();
         out.write_any ($result);
         break;
       }


  /**
          * Compares two DynAny values for equality.
          * Two DynAny values are equal if their TypeCodes are equivalent and, recursively, all component DynAnys
          * have equal values.
          * The current position of the two DynAnys being compared has no effect on the result of equal.
          *
          * @return true of the DynAnys are equal, false otherwise
          */
       case 7:  // DynamicAny/DynAny/equal
       {
         org.omg.DynamicAny.DynAny dyn_any = org.omg.DynamicAny.DynAnyHelper.read (in);
         boolean $result = false;
         $result = this.equal (dyn_any);
         out = $rh.createReply();
         out.write_boolean ($result);
         break;
       }


  /**
          * Destroys a DynAny object.
          * This operation frees any resources used to represent the data value associated with a DynAny object.
          * It must be invoked on references obtained from one of the creation operations on the ORB interface
          * or on a reference returned by DynAny.copy() to avoid resource leaks.
          * Invoking destroy on component DynAny objects (for example, on objects returned by the
          * current_component operation) does nothing.
          * Destruction of a DynAny object implies destruction of all DynAny objects obtained from it.
          * That is, references to components of a destroyed DynAny become invalid.
          * Invocations on such references raise OBJECT_NOT_EXIST.
          * It is possible to manipulate a component of a DynAny beyond the life time of the DynAny
          * from which the component was obtained by making a copy of the component with the copy operation
          * before destroying the DynAny from which the component was obtained.
          */
       case 8:  // DynamicAny/DynAny/destroy
       {
         this.destroy ();
         out = $rh.createReply();
         break;
       }


  /**
          * Creates a new DynAny object whose value is a deep copy of the DynAny on which it is invoked.
          * The operation is polymorphic, that is, invoking it on one of the types derived from DynAny,
          * such as DynStruct, creates the derived type but returns its reference as the DynAny base type.
          *
          * @return a deep copy of the DynAny object
          */
       case 9:  // DynamicAny/DynAny/copy
       {
         org.omg.DynamicAny.DynAny $result = null;
         $result = this.copy ();
         out = $rh.createReply();
         org.omg.DynamicAny.DynAnyHelper.write (out, $result);
         break;
       }


  /**
          * Inserts a boolean value into the DynAny.
          *
          * @exception InvalidValue if this DynAny has components but has a current position of -1
          * @exception TypeMismatch if called on a DynAny whose current component itself has components
          */
       case 10:  // DynamicAny/DynAny/insert_boolean
       {
         try {
           boolean value = in.read_boolean ();
           this.insert_boolean (value);
           out = $rh.createReply();
         } catch (org.omg.DynamicAny.DynAnyPackage.TypeMismatch $ex) {
           out = $rh.createExceptionReply ();
           org.omg.DynamicAny.DynAnyPackage.TypeMismatchHelper.write (out, $ex);
         } catch (org.omg.DynamicAny.DynAnyPackage.InvalidValue $ex) {
           out = $rh.createExceptionReply ();
           org.omg.DynamicAny.DynAnyPackage.InvalidValueHelper.write (out, $ex);
         }
         break;
       }


  /**
          * Inserts a byte value into the DynAny. The IDL octet data type is mapped to the Java byte data type.
          *
          * @exception InvalidValue if this DynAny has components but has a current position of -1
          * @exception TypeMismatch if called on a DynAny whose current component itself has components
          */
       case 11:  // DynamicAny/DynAny/insert_octet
       {
         try {
           byte value = in.read_octet ();
           this.insert_octet (value);
           out = $rh.createReply();
         } catch (org.omg.DynamicAny.DynAnyPackage.TypeMismatch $ex) {
           out = $rh.createExceptionReply ();
           org.omg.DynamicAny.DynAnyPackage.TypeMismatchHelper.write (out, $ex);
         } catch (org.omg.DynamicAny.DynAnyPackage.InvalidValue $ex) {
           out = $rh.createExceptionReply ();
           org.omg.DynamicAny.DynAnyPackage.InvalidValueHelper.write (out, $ex);
         }
         break;
       }


  /**
          * Inserts a char value into the DynAny.
          *
          * @exception InvalidValue if this DynAny has components but has a current position of -1
          * @exception TypeMismatch if called on a DynAny whose current component itself has components
          */
       case 12:  // DynamicAny/DynAny/insert_char
       {
         try {
           char value = in.read_char ();
           this.insert_char (value);
           out = $rh.createReply();
         } catch (org.omg.DynamicAny.DynAnyPackage.TypeMismatch $ex) {
           out = $rh.createExceptionReply ();
           org.omg.DynamicAny.DynAnyPackage.TypeMismatchHelper.write (out, $ex);
         } catch (org.omg.DynamicAny.DynAnyPackage.InvalidValue $ex) {
           out = $rh.createExceptionReply ();
           org.omg.DynamicAny.DynAnyPackage.InvalidValueHelper.write (out, $ex);
         }
         break;
       }


  /**
          * Inserts a short value into the DynAny.
          *
          * @exception InvalidValue if this DynAny has components but has a current position of -1
          * @exception TypeMismatch if called on a DynAny whose current component itself has components
          */
       case 13:  // DynamicAny/DynAny/insert_short
       {
         try {
           short value = in.read_short ();
           this.insert_short (value);
           out = $rh.createReply();
         } catch (org.omg.DynamicAny.DynAnyPackage.TypeMismatch $ex) {
           out = $rh.createExceptionReply ();
           org.omg.DynamicAny.DynAnyPackage.TypeMismatchHelper.write (out, $ex);
         } catch (org.omg.DynamicAny.DynAnyPackage.InvalidValue $ex) {
           out = $rh.createExceptionReply ();
           org.omg.DynamicAny.DynAnyPackage.InvalidValueHelper.write (out, $ex);
         }
         break;
       }


  /**
          * Inserts a short value into the DynAny. The IDL ushort data type is mapped to the Java short data type.
          *
          * @exception InvalidValue if this DynAny has components but has a current position of -1
          * @exception TypeMismatch if called on a DynAny whose current component itself has components
          */
       case 14:  // DynamicAny/DynAny/insert_ushort
       {
         try {
           short value = in.read_ushort ();
           this.insert_ushort (value);
           out = $rh.createReply();
         } catch (org.omg.DynamicAny.DynAnyPackage.TypeMismatch $ex) {
           out = $rh.createExceptionReply ();
           org.omg.DynamicAny.DynAnyPackage.TypeMismatchHelper.write (out, $ex);
         } catch (org.omg.DynamicAny.DynAnyPackage.InvalidValue $ex) {
           out = $rh.createExceptionReply ();
           org.omg.DynamicAny.DynAnyPackage.InvalidValueHelper.write (out, $ex);
         }
         break;
       }


  /**
          * Inserts an integer value into the DynAny. The IDL long data type is mapped to the Java int data type.
          *
          * @exception InvalidValue if this DynAny has components but has a current position of -1
          * @exception TypeMismatch if called on a DynAny whose current component itself has components
          */
       case 15:  // DynamicAny/DynAny/insert_long
       {
         try {
           int value = in.read_long ();
           this.insert_long (value);
           out = $rh.createReply();
         } catch (org.omg.DynamicAny.DynAnyPackage.TypeMismatch $ex) {
           out = $rh.createExceptionReply ();
           org.omg.DynamicAny.DynAnyPackage.TypeMismatchHelper.write (out, $ex);
         } catch (org.omg.DynamicAny.DynAnyPackage.InvalidValue $ex) {
           out = $rh.createExceptionReply ();
           org.omg.DynamicAny.DynAnyPackage.InvalidValueHelper.write (out, $ex);
         }
         break;
       }


  /**
          * Inserts an integer value into the DynAny. The IDL ulong data type is mapped to the Java int data type.
          *
          * @exception InvalidValue if this DynAny has components but has a current position of -1
          * @exception TypeMismatch if called on a DynAny whose current component itself has components
          */
       case 16:  // DynamicAny/DynAny/insert_ulong
       {
         try {
           int value = in.read_ulong ();
           this.insert_ulong (value);
           out = $rh.createReply();
         } catch (org.omg.DynamicAny.DynAnyPackage.TypeMismatch $ex) {
           out = $rh.createExceptionReply ();
           org.omg.DynamicAny.DynAnyPackage.TypeMismatchHelper.write (out, $ex);
         } catch (org.omg.DynamicAny.DynAnyPackage.InvalidValue $ex) {
           out = $rh.createExceptionReply ();
           org.omg.DynamicAny.DynAnyPackage.InvalidValueHelper.write (out, $ex);
         }
         break;
       }


  /**
          * Inserts a float value into the DynAny.
          *
          * @exception InvalidValue if this DynAny has components but has a current position of -1
          * @exception TypeMismatch if called on a DynAny whose current component itself has components
          */
       case 17:  // DynamicAny/DynAny/insert_float
       {
         try {
           float value = in.read_float ();
           this.insert_float (value);
           out = $rh.createReply();
         } catch (org.omg.DynamicAny.DynAnyPackage.TypeMismatch $ex) {
           out = $rh.createExceptionReply ();
           org.omg.DynamicAny.DynAnyPackage.TypeMismatchHelper.write (out, $ex);
         } catch (org.omg.DynamicAny.DynAnyPackage.InvalidValue $ex) {
           out = $rh.createExceptionReply ();
           org.omg.DynamicAny.DynAnyPackage.InvalidValueHelper.write (out, $ex);
         }
         break;
       }


  /**
          * Inserts a double value into the DynAny.
          *
          * @exception InvalidValue if this DynAny has components but has a current position of -1
          * @exception TypeMismatch if called on a DynAny whose current component itself has components
          */
       case 18:  // DynamicAny/DynAny/insert_double
       {
         try {
           double value = in.read_double ();
           this.insert_double (value);
           out = $rh.createReply();
         } catch (org.omg.DynamicAny.DynAnyPackage.TypeMismatch $ex) {
           out = $rh.createExceptionReply ();
           org.omg.DynamicAny.DynAnyPackage.TypeMismatchHelper.write (out, $ex);
         } catch (org.omg.DynamicAny.DynAnyPackage.InvalidValue $ex) {
           out = $rh.createExceptionReply ();
           org.omg.DynamicAny.DynAnyPackage.InvalidValueHelper.write (out, $ex);
         }
         break;
       }


  /**
          * Inserts a string value into the DynAny.
          * Both bounded and unbounded strings are inserted using this method.
          *
          * @exception InvalidValue if this DynAny has components but has a current position of -1
          * @exception InvalidValue if the string inserted is longer than the bound of a bounded string
          * @exception TypeMismatch if called on a DynAny whose current component itself has components
          */
       case 19:  // DynamicAny/DynAny/insert_string
       {
         try {
           String value = in.read_string ();
           this.insert_string (value);
           out = $rh.createReply();
         } catch (org.omg.DynamicAny.DynAnyPackage.TypeMismatch $ex) {
           out = $rh.createExceptionReply ();
           org.omg.DynamicAny.DynAnyPackage.TypeMismatchHelper.write (out, $ex);
         } catch (org.omg.DynamicAny.DynAnyPackage.InvalidValue $ex) {
           out = $rh.createExceptionReply ();
           org.omg.DynamicAny.DynAnyPackage.InvalidValueHelper.write (out, $ex);
         }
         break;
       }


  /**
          * Inserts a reference to a CORBA object into the DynAny.
          *
          * @exception InvalidValue if this DynAny has components but has a current position of -1
          * @exception TypeMismatch if called on a DynAny whose current component itself has components
          */
       case 20:  // DynamicAny/DynAny/insert_reference
       {
         try {
           org.omg.CORBA.Object value = org.omg.CORBA.ObjectHelper.read (in);
           this.insert_reference (value);
           out = $rh.createReply();
         } catch (org.omg.DynamicAny.DynAnyPackage.TypeMismatch $ex) {
           out = $rh.createExceptionReply ();
           org.omg.DynamicAny.DynAnyPackage.TypeMismatchHelper.write (out, $ex);
         } catch (org.omg.DynamicAny.DynAnyPackage.InvalidValue $ex) {
           out = $rh.createExceptionReply ();
           org.omg.DynamicAny.DynAnyPackage.InvalidValueHelper.write (out, $ex);
         }
         break;
       }


  /**
          * Inserts a TypeCode object into the DynAny.
          *
          * @exception InvalidValue if this DynAny has components but has a current position of -1
          * @exception TypeMismatch if called on a DynAny whose current component itself has components
          */
       case 21:  // DynamicAny/DynAny/insert_typecode
       {
         try {
           org.omg.CORBA.TypeCode value = in.read_TypeCode ();
           this.insert_typecode (value);
           out = $rh.createReply();
         } catch (org.omg.DynamicAny.DynAnyPackage.TypeMismatch $ex) {
           out = $rh.createExceptionReply ();
           org.omg.DynamicAny.DynAnyPackage.TypeMismatchHelper.write (out, $ex);
         } catch (org.omg.DynamicAny.DynAnyPackage.InvalidValue $ex) {
           out = $rh.createExceptionReply ();
           org.omg.DynamicAny.DynAnyPackage.InvalidValueHelper.write (out, $ex);
         }
         break;
       }


  /**
          * Inserts a long value into the DynAny. The IDL long long data type is mapped to the Java long data type.
          *
          * @exception InvalidValue if this DynAny has components but has a current position of -1
          * @exception TypeMismatch if called on a DynAny whose current component itself has components
          */
       case 22:  // DynamicAny/DynAny/insert_longlong
       {
         try {
           long value = in.read_longlong ();
           this.insert_longlong (value);
           out = $rh.createReply();
         } catch (org.omg.DynamicAny.DynAnyPackage.TypeMismatch $ex) {
           out = $rh.createExceptionReply ();
           org.omg.DynamicAny.DynAnyPackage.TypeMismatchHelper.write (out, $ex);
         } catch (org.omg.DynamicAny.DynAnyPackage.InvalidValue $ex) {
           out = $rh.createExceptionReply ();
           org.omg.DynamicAny.DynAnyPackage.InvalidValueHelper.write (out, $ex);
         }
         break;
       }


  /**
          * Inserts a long value into the DynAny.
          * The IDL unsigned long long data type is mapped to the Java long data type.
          *
          * @exception InvalidValue if this DynAny has components but has a current position of -1
          * @exception TypeMismatch if called on a DynAny whose current component itself has components
          */
       case 23:  // DynamicAny/DynAny/insert_ulonglong
       {
         try {
           long value = in.read_ulonglong ();
           this.insert_ulonglong (value);
           out = $rh.createReply();
         } catch (org.omg.DynamicAny.DynAnyPackage.TypeMismatch $ex) {
           out = $rh.createExceptionReply ();
           org.omg.DynamicAny.DynAnyPackage.TypeMismatchHelper.write (out, $ex);
         } catch (org.omg.DynamicAny.DynAnyPackage.InvalidValue $ex) {
           out = $rh.createExceptionReply ();
           org.omg.DynamicAny.DynAnyPackage.InvalidValueHelper.write (out, $ex);
         }
         break;
       }


  /**
          * Inserts a char value into the DynAny. The IDL wchar data type is mapped to the Java char data type.
          *
          * @exception InvalidValue if this DynAny has components but has a current position of -1
          * @exception TypeMismatch if called on a DynAny whose current component itself has components
          */
       case 24:  // DynamicAny/DynAny/insert_wchar
       {
         try {
           char value = in.read_wchar ();
           this.insert_wchar (value);
           out = $rh.createReply();
         } catch (org.omg.DynamicAny.DynAnyPackage.TypeMismatch $ex) {
           out = $rh.createExceptionReply ();
           org.omg.DynamicAny.DynAnyPackage.TypeMismatchHelper.write (out, $ex);
         } catch (org.omg.DynamicAny.DynAnyPackage.InvalidValue $ex) {
           out = $rh.createExceptionReply ();
           org.omg.DynamicAny.DynAnyPackage.InvalidValueHelper.write (out, $ex);
         }
         break;
       }


  /**
          * Inserts a string value into the DynAny.
          * Both bounded and unbounded strings are inserted using this method.
          *
          * @exception InvalidValue if this DynAny has components but has a current position of -1
          * @exception InvalidValue if the string inserted is longer than the bound of a bounded string
          */
       case 25:  // DynamicAny/DynAny/insert_wstring
       {
         try {
           String value = in.read_wstring ();
           this.insert_wstring (value);
           out = $rh.createReply();
         } catch (org.omg.DynamicAny.DynAnyPackage.TypeMismatch $ex) {
           out = $rh.createExceptionReply ();
           org.omg.DynamicAny.DynAnyPackage.TypeMismatchHelper.write (out, $ex);
         } catch (org.omg.DynamicAny.DynAnyPackage.InvalidValue $ex) {
           out = $rh.createExceptionReply ();
           org.omg.DynamicAny.DynAnyPackage.InvalidValueHelper.write (out, $ex);
         }
         break;
       }


  /**
          * Inserts an Any value into the Any represented by this DynAny.
          *
          * @exception InvalidValue if this DynAny has components but has a current position of -1
          * @exception TypeMismatch if called on a DynAny whose current component itself has components
          */
       case 26:  // DynamicAny/DynAny/insert_any
       {
         try {
           org.omg.CORBA.Any value = in.read_any ();
           this.insert_any (value);
           out = $rh.createReply();
         } catch (org.omg.DynamicAny.DynAnyPackage.TypeMismatch $ex) {
           out = $rh.createExceptionReply ();
           org.omg.DynamicAny.DynAnyPackage.TypeMismatchHelper.write (out, $ex);
         } catch (org.omg.DynamicAny.DynAnyPackage.InvalidValue $ex) {
           out = $rh.createExceptionReply ();
           org.omg.DynamicAny.DynAnyPackage.InvalidValueHelper.write (out, $ex);
         }
         break;
       }


  /**
          * Inserts the Any value contained in the parameter DynAny into the Any represented by this DynAny.
          *
          * @exception InvalidValue if this DynAny has components but has a current position of -1
          * @exception TypeMismatch if called on a DynAny whose current component itself has components
          */
       case 27:  // DynamicAny/DynAny/insert_dyn_any
       {
         try {
           org.omg.DynamicAny.DynAny value = org.omg.DynamicAny.DynAnyHelper.read (in);
           this.insert_dyn_any (value);
           out = $rh.createReply();
         } catch (org.omg.DynamicAny.DynAnyPackage.TypeMismatch $ex) {
           out = $rh.createExceptionReply ();
           org.omg.DynamicAny.DynAnyPackage.TypeMismatchHelper.write (out, $ex);
         } catch (org.omg.DynamicAny.DynAnyPackage.InvalidValue $ex) {
           out = $rh.createExceptionReply ();
           org.omg.DynamicAny.DynAnyPackage.InvalidValueHelper.write (out, $ex);
         }
         break;
       }


  /**
          * Inserts a reference to a Serializable object into this DynAny.
          * The IDL ValueBase type is mapped to the Java Serializable type.
          *
          * @exception InvalidValue if this DynAny has components but has a current position of -1
          * @exception TypeMismatch if called on a DynAny whose current component itself has components
          */
       case 28:  // DynamicAny/DynAny/insert_val
       {
         try {
           java.io.Serializable value = org.omg.CORBA.ValueBaseHelper.read (in);
           this.insert_val (value);
           out = $rh.createReply();
         } catch (org.omg.DynamicAny.DynAnyPackage.TypeMismatch $ex) {
           out = $rh.createExceptionReply ();
           org.omg.DynamicAny.DynAnyPackage.TypeMismatchHelper.write (out, $ex);
         } catch (org.omg.DynamicAny.DynAnyPackage.InvalidValue $ex) {
           out = $rh.createExceptionReply ();
           org.omg.DynamicAny.DynAnyPackage.InvalidValueHelper.write (out, $ex);
         }
         break;
       }


  /**
          * Extracts the boolean value from this DynAny.
          *
          * @exception TypeMismatch if the accessed component in the DynAny is of a type
          * that is not equivalent to the requested type.
          * @exception TypeMismatch if called on a DynAny whose current component itself has components
          * @exception InvalidValue if this DynAny has components but has a current position of -1
          */
       case 29:  // DynamicAny/DynAny/get_boolean
       {
         try {
           boolean $result = false;
           $result = this.get_boolean ();
           out = $rh.createReply();
           out.write_boolean ($result);
         } catch (org.omg.DynamicAny.DynAnyPackage.TypeMismatch $ex) {
           out = $rh.createExceptionReply ();
           org.omg.DynamicAny.DynAnyPackage.TypeMismatchHelper.write (out, $ex);
         } catch (org.omg.DynamicAny.DynAnyPackage.InvalidValue $ex) {
           out = $rh.createExceptionReply ();
           org.omg.DynamicAny.DynAnyPackage.InvalidValueHelper.write (out, $ex);
         }
         break;
       }


  /**
          * Extracts the byte value from this DynAny. The IDL octet data type is mapped to the Java byte data type.
          *
          * @exception TypeMismatch if the accessed component in the DynAny is of a type
          * that is not equivalent to the requested type.
          * @exception TypeMismatch if called on a DynAny whose current component itself has components
          * @exception InvalidValue if this DynAny has components but has a current position of -1
          */
       case 30:  // DynamicAny/DynAny/get_octet
       {
         try {
           byte $result = (byte)0;
           $result = this.get_octet ();
           out = $rh.createReply();
           out.write_octet ($result);
         } catch (org.omg.DynamicAny.DynAnyPackage.TypeMismatch $ex) {
           out = $rh.createExceptionReply ();
           org.omg.DynamicAny.DynAnyPackage.TypeMismatchHelper.write (out, $ex);
         } catch (org.omg.DynamicAny.DynAnyPackage.InvalidValue $ex) {
           out = $rh.createExceptionReply ();
           org.omg.DynamicAny.DynAnyPackage.InvalidValueHelper.write (out, $ex);
         }
         break;
       }


  /**
          * Extracts the char value from this DynAny.
          *
          * @exception TypeMismatch if the accessed component in the DynAny is of a type
          * that is not equivalent to the requested type.
          * @exception TypeMismatch if called on a DynAny whose current component itself has components
          * @exception InvalidValue if this DynAny has components but has a current position of -1
          */
       case 31:  // DynamicAny/DynAny/get_char
       {
         try {
           char $result = (char)0;
           $result = this.get_char ();
           out = $rh.createReply();
           out.write_char ($result);
         } catch (org.omg.DynamicAny.DynAnyPackage.TypeMismatch $ex) {
           out = $rh.createExceptionReply ();
           org.omg.DynamicAny.DynAnyPackage.TypeMismatchHelper.write (out, $ex);
         } catch (org.omg.DynamicAny.DynAnyPackage.InvalidValue $ex) {
           out = $rh.createExceptionReply ();
           org.omg.DynamicAny.DynAnyPackage.InvalidValueHelper.write (out, $ex);
         }
         break;
       }


  /**
          * Extracts the short value from this DynAny.
          *
          * @exception TypeMismatch if the accessed component in the DynAny is of a type
          * that is not equivalent to the requested type.
          * @exception TypeMismatch if called on a DynAny whose current component itself has components
          * @exception InvalidValue if this DynAny has components but has a current position of -1
          */
       case 32:  // DynamicAny/DynAny/get_short
       {
         try {
           short $result = (short)0;
           $result = this.get_short ();
           out = $rh.createReply();
           out.write_short ($result);
         } catch (org.omg.DynamicAny.DynAnyPackage.TypeMismatch $ex) {
           out = $rh.createExceptionReply ();
           org.omg.DynamicAny.DynAnyPackage.TypeMismatchHelper.write (out, $ex);
         } catch (org.omg.DynamicAny.DynAnyPackage.InvalidValue $ex) {
           out = $rh.createExceptionReply ();
           org.omg.DynamicAny.DynAnyPackage.InvalidValueHelper.write (out, $ex);
         }
         break;
       }


  /**
          * Extracts the short value from this DynAny. The IDL ushort data type is mapped to the Java short data type.
          *
          * @exception TypeMismatch if the accessed component in the DynAny is of a type
          * that is not equivalent to the requested type.
          * @exception TypeMismatch if called on a DynAny whose current component itself has components
          * @exception InvalidValue if this DynAny has components but has a current position of -1
          */
       case 33:  // DynamicAny/DynAny/get_ushort
       {
         try {
           short $result = (short)0;
           $result = this.get_ushort ();
           out = $rh.createReply();
           out.write_ushort ($result);
         } catch (org.omg.DynamicAny.DynAnyPackage.TypeMismatch $ex) {
           out = $rh.createExceptionReply ();
           org.omg.DynamicAny.DynAnyPackage.TypeMismatchHelper.write (out, $ex);
         } catch (org.omg.DynamicAny.DynAnyPackage.InvalidValue $ex) {
           out = $rh.createExceptionReply ();
           org.omg.DynamicAny.DynAnyPackage.InvalidValueHelper.write (out, $ex);
         }
         break;
       }


  /**
          * Extracts the integer value from this DynAny. The IDL long data type is mapped to the Java int data type.
          *
          * @exception TypeMismatch if the accessed component in the DynAny is of a type
          * that is not equivalent to the requested type.
          * @exception TypeMismatch if called on a DynAny whose current component itself has components
          * @exception InvalidValue if this DynAny has components but has a current position of -1
          */
       case 34:  // DynamicAny/DynAny/get_long
       {
         try {
           int $result = (int)0;
           $result = this.get_long ();
           out = $rh.createReply();
           out.write_long ($result);
         } catch (org.omg.DynamicAny.DynAnyPackage.TypeMismatch $ex) {
           out = $rh.createExceptionReply ();
           org.omg.DynamicAny.DynAnyPackage.TypeMismatchHelper.write (out, $ex);
         } catch (org.omg.DynamicAny.DynAnyPackage.InvalidValue $ex) {
           out = $rh.createExceptionReply ();
           org.omg.DynamicAny.DynAnyPackage.InvalidValueHelper.write (out, $ex);
         }
         break;
       }


  /**
          * Extracts the integer value from this DynAny. The IDL ulong data type is mapped to the Java int data type.
          *
          * @exception TypeMismatch if the accessed component in the DynAny is of a type
          * that is not equivalent to the requested type.
          * @exception TypeMismatch if called on a DynAny whose current component itself has components
          * @exception InvalidValue if this DynAny has components but has a current position of -1
          */
       case 35:  // DynamicAny/DynAny/get_ulong
       {
         try {
           int $result = (int)0;
           $result = this.get_ulong ();
           out = $rh.createReply();
           out.write_ulong ($result);
         } catch (org.omg.DynamicAny.DynAnyPackage.TypeMismatch $ex) {
           out = $rh.createExceptionReply ();
           org.omg.DynamicAny.DynAnyPackage.TypeMismatchHelper.write (out, $ex);
         } catch (org.omg.DynamicAny.DynAnyPackage.InvalidValue $ex) {
           out = $rh.createExceptionReply ();
           org.omg.DynamicAny.DynAnyPackage.InvalidValueHelper.write (out, $ex);
         }
         break;
       }


  /**
          * Extracts the float value from this DynAny.
          *
          * @exception TypeMismatch if the accessed component in the DynAny is of a type
          * that is not equivalent to the requested type.
          * @exception TypeMismatch if called on a DynAny whose current component itself has components
          * @exception InvalidValue if this DynAny has components but has a current position of -1
          */
       case 36:  // DynamicAny/DynAny/get_float
       {
         try {
           float $result = (float)0;
           $result = this.get_float ();
           out = $rh.createReply();
           out.write_float ($result);
         } catch (org.omg.DynamicAny.DynAnyPackage.TypeMismatch $ex) {
           out = $rh.createExceptionReply ();
           org.omg.DynamicAny.DynAnyPackage.TypeMismatchHelper.write (out, $ex);
         } catch (org.omg.DynamicAny.DynAnyPackage.InvalidValue $ex) {
           out = $rh.createExceptionReply ();
           org.omg.DynamicAny.DynAnyPackage.InvalidValueHelper.write (out, $ex);
         }
         break;
       }


  /**
          * Extracts the double value from this DynAny.
          *
          * @exception TypeMismatch if the accessed component in the DynAny is of a type
          * that is not equivalent to the requested type.
          * @exception TypeMismatch if called on a DynAny whose current component itself has components
          * @exception InvalidValue if this DynAny has components but has a current position of -1
          */
       case 37:  // DynamicAny/DynAny/get_double
       {
         try {
           double $result = (double)0;
           $result = this.get_double ();
           out = $rh.createReply();
           out.write_double ($result);
         } catch (org.omg.DynamicAny.DynAnyPackage.TypeMismatch $ex) {
           out = $rh.createExceptionReply ();
           org.omg.DynamicAny.DynAnyPackage.TypeMismatchHelper.write (out, $ex);
         } catch (org.omg.DynamicAny.DynAnyPackage.InvalidValue $ex) {
           out = $rh.createExceptionReply ();
           org.omg.DynamicAny.DynAnyPackage.InvalidValueHelper.write (out, $ex);
         }
         break;
       }


  /**
          * Extracts the string value from this DynAny.
          * Both bounded and unbounded strings are extracted using this method.
          *
          * @exception TypeMismatch if the accessed component in the DynAny is of a type
          * that is not equivalent to the requested type.
          * @exception TypeMismatch if called on a DynAny whose current component itself has components
          * @exception InvalidValue if this DynAny has components but has a current position of -1
          */
       case 38:  // DynamicAny/DynAny/get_string
       {
         try {
           String $result = null;
           $result = this.get_string ();
           out = $rh.createReply();
           out.write_string ($result);
         } catch (org.omg.DynamicAny.DynAnyPackage.TypeMismatch $ex) {
           out = $rh.createExceptionReply ();
           org.omg.DynamicAny.DynAnyPackage.TypeMismatchHelper.write (out, $ex);
         } catch (org.omg.DynamicAny.DynAnyPackage.InvalidValue $ex) {
           out = $rh.createExceptionReply ();
           org.omg.DynamicAny.DynAnyPackage.InvalidValueHelper.write (out, $ex);
         }
         break;
       }


  /**
          * Extracts the reference to a CORBA Object from this DynAny.
          *
          * @exception TypeMismatch if the accessed component in the DynAny is of a type
          * that is not equivalent to the requested type.
          * @exception TypeMismatch if called on a DynAny whose current component itself has components
          * @exception InvalidValue if this DynAny has components but has a current position of -1
          */
       case 39:  // DynamicAny/DynAny/get_reference
       {
         try {
           org.omg.CORBA.Object $result = null;
           $result = this.get_reference ();
           out = $rh.createReply();
           org.omg.CORBA.ObjectHelper.write (out, $result);
         } catch (org.omg.DynamicAny.DynAnyPackage.TypeMismatch $ex) {
           out = $rh.createExceptionReply ();
           org.omg.DynamicAny.DynAnyPackage.TypeMismatchHelper.write (out, $ex);
         } catch (org.omg.DynamicAny.DynAnyPackage.InvalidValue $ex) {
           out = $rh.createExceptionReply ();
           org.omg.DynamicAny.DynAnyPackage.InvalidValueHelper.write (out, $ex);
         }
         break;
       }


  /**
          * Extracts the TypeCode object from this DynAny.
          *
          * @exception TypeMismatch if the accessed component in the DynAny is of a type
          * that is not equivalent to the requested type.
          * @exception TypeMismatch if called on a DynAny whose current component itself has components
          * @exception InvalidValue if this DynAny has components but has a current position of -1
          */
       case 40:  // DynamicAny/DynAny/get_typecode
       {
         try {
           org.omg.CORBA.TypeCode $result = null;
           $result = this.get_typecode ();
           out = $rh.createReply();
           out.write_TypeCode ($result);
         } catch (org.omg.DynamicAny.DynAnyPackage.TypeMismatch $ex) {
           out = $rh.createExceptionReply ();
           org.omg.DynamicAny.DynAnyPackage.TypeMismatchHelper.write (out, $ex);
         } catch (org.omg.DynamicAny.DynAnyPackage.InvalidValue $ex) {
           out = $rh.createExceptionReply ();
           org.omg.DynamicAny.DynAnyPackage.InvalidValueHelper.write (out, $ex);
         }
         break;
       }


  /**
          * Extracts the long value from this DynAny. The IDL long long data type is mapped to the Java long data type.
          *
          * @exception TypeMismatch if the accessed component in the DynAny is of a type
          * that is not equivalent to the requested type.
          * @exception TypeMismatch if called on a DynAny whose current component itself has components
          * @exception InvalidValue if this DynAny has components but has a current position of -1
          */
       case 41:  // DynamicAny/DynAny/get_longlong
       {
         try {
           long $result = (long)0;
           $result = this.get_longlong ();
           out = $rh.createReply();
           out.write_longlong ($result);
         } catch (org.omg.DynamicAny.DynAnyPackage.TypeMismatch $ex) {
           out = $rh.createExceptionReply ();
           org.omg.DynamicAny.DynAnyPackage.TypeMismatchHelper.write (out, $ex);
         } catch (org.omg.DynamicAny.DynAnyPackage.InvalidValue $ex) {
           out = $rh.createExceptionReply ();
           org.omg.DynamicAny.DynAnyPackage.InvalidValueHelper.write (out, $ex);
         }
         break;
       }


  /**
          * Extracts the long value from this DynAny.
          * The IDL unsigned long long data type is mapped to the Java long data type.
          *
          * @exception TypeMismatch if the accessed component in the DynAny is of a type
          * that is not equivalent to the requested type.
          * @exception TypeMismatch if called on a DynAny whose current component itself has components
          * @exception InvalidValue if this DynAny has components but has a current position of -1
          */
       case 42:  // DynamicAny/DynAny/get_ulonglong
       {
         try {
           long $result = (long)0;
           $result = this.get_ulonglong ();
           out = $rh.createReply();
           out.write_ulonglong ($result);
         } catch (org.omg.DynamicAny.DynAnyPackage.TypeMismatch $ex) {
           out = $rh.createExceptionReply ();
           org.omg.DynamicAny.DynAnyPackage.TypeMismatchHelper.write (out, $ex);
         } catch (org.omg.DynamicAny.DynAnyPackage.InvalidValue $ex) {
           out = $rh.createExceptionReply ();
           org.omg.DynamicAny.DynAnyPackage.InvalidValueHelper.write (out, $ex);
         }
         break;
       }


  /**
          * Extracts the long value from this DynAny. The IDL wchar data type is mapped to the Java char data type.
          *
          * @exception TypeMismatch if the accessed component in the DynAny is of a type
          * that is not equivalent to the requested type.
          * @exception TypeMismatch if called on a DynAny whose current component itself has components
          * @exception InvalidValue if this DynAny has components but has a current position of -1
          */
       case 43:  // DynamicAny/DynAny/get_wchar
       {
         try {
           char $result = (char)0;
           $result = this.get_wchar ();
           out = $rh.createReply();
           out.write_wchar ($result);
         } catch (org.omg.DynamicAny.DynAnyPackage.TypeMismatch $ex) {
           out = $rh.createExceptionReply ();
           org.omg.DynamicAny.DynAnyPackage.TypeMismatchHelper.write (out, $ex);
         } catch (org.omg.DynamicAny.DynAnyPackage.InvalidValue $ex) {
           out = $rh.createExceptionReply ();
           org.omg.DynamicAny.DynAnyPackage.InvalidValueHelper.write (out, $ex);
         }
         break;
       }


  /**
          * Extracts the string value from this DynAny.
          * Both bounded and unbounded strings are extracted using this method.
          *
          * @exception TypeMismatch if the accessed component in the DynAny is of a type
          * that is not equivalent to the requested type.
          * @exception TypeMismatch if called on a DynAny whose current component itself has components
          */
       case 44:  // DynamicAny/DynAny/get_wstring
       {
         try {
           String $result = null;
           $result = this.get_wstring ();
           out = $rh.createReply();
           out.write_wstring ($result);
         } catch (org.omg.DynamicAny.DynAnyPackage.TypeMismatch $ex) {
           out = $rh.createExceptionReply ();
           org.omg.DynamicAny.DynAnyPackage.TypeMismatchHelper.write (out, $ex);
         } catch (org.omg.DynamicAny.DynAnyPackage.InvalidValue $ex) {
           out = $rh.createExceptionReply ();
           org.omg.DynamicAny.DynAnyPackage.InvalidValueHelper.write (out, $ex);
         }
         break;
       }


  /**
          * Extracts an Any value contained in the Any represented by this DynAny.
          *
          * @exception TypeMismatch if the accessed component in the DynAny is of a type
          * that is not equivalent to the requested type.
          * @exception TypeMismatch if called on a DynAny whose current component itself has components
          * @exception InvalidValue if this DynAny has components but has a current position of -1
          */
       case 45:  // DynamicAny/DynAny/get_any
       {
         try {
           org.omg.CORBA.Any $result = null;
           $result = this.get_any ();
           out = $rh.createReply();
           out.write_any ($result);
         } catch (org.omg.DynamicAny.DynAnyPackage.TypeMismatch $ex) {
           out = $rh.createExceptionReply ();
           org.omg.DynamicAny.DynAnyPackage.TypeMismatchHelper.write (out, $ex);
         } catch (org.omg.DynamicAny.DynAnyPackage.InvalidValue $ex) {
           out = $rh.createExceptionReply ();
           org.omg.DynamicAny.DynAnyPackage.InvalidValueHelper.write (out, $ex);
         }
         break;
       }


  /**
          * Extracts the Any value contained in the Any represented by this DynAny and returns it wrapped
          * into a new DynAny.
          *
          * @exception TypeMismatch if the accessed component in the DynAny is of a type
          * that is not equivalent to the requested type.
          * @exception TypeMismatch if called on a DynAny whose current component itself has components
          * @exception InvalidValue if this DynAny has components but has a current position of -1
          */
       case 46:  // DynamicAny/DynAny/get_dyn_any
       {
         try {
           org.omg.DynamicAny.DynAny $result = null;
           $result = this.get_dyn_any ();
           out = $rh.createReply();
           org.omg.DynamicAny.DynAnyHelper.write (out, $result);
         } catch (org.omg.DynamicAny.DynAnyPackage.TypeMismatch $ex) {
           out = $rh.createExceptionReply ();
           org.omg.DynamicAny.DynAnyPackage.TypeMismatchHelper.write (out, $ex);
         } catch (org.omg.DynamicAny.DynAnyPackage.InvalidValue $ex) {
           out = $rh.createExceptionReply ();
           org.omg.DynamicAny.DynAnyPackage.InvalidValueHelper.write (out, $ex);
         }
         break;
       }


  /**
          * Extracts a Serializable object from this DynAny.
          * The IDL ValueBase type is mapped to the Java Serializable type.
          *
          * @exception TypeMismatch if the accessed component in the DynAny is of a type
          * that is not equivalent to the requested type.
          * @exception TypeMismatch if called on a DynAny whose current component itself has components
          * @exception InvalidValue if this DynAny has components but has a current position of -1
          */
       case 47:  // DynamicAny/DynAny/get_val
       {
         try {
           java.io.Serializable $result = null;
           $result = this.get_val ();
           out = $rh.createReply();
           org.omg.CORBA.ValueBaseHelper.write (out, $result);
         } catch (org.omg.DynamicAny.DynAnyPackage.TypeMismatch $ex) {
           out = $rh.createExceptionReply ();
           org.omg.DynamicAny.DynAnyPackage.TypeMismatchHelper.write (out, $ex);
         } catch (org.omg.DynamicAny.DynAnyPackage.InvalidValue $ex) {
           out = $rh.createExceptionReply ();
           org.omg.DynamicAny.DynAnyPackage.InvalidValueHelper.write (out, $ex);
         }
         break;
       }


  /**
          * Sets the current position to index. The current position is indexed 0 to n-1, that is,
          * index zero corresponds to the first component. The operation returns true if the resulting
          * current position indicates a component of the DynAny and false if index indicates
          * a position that does not correspond to a component.
          * Calling seek with a negative index is legal. It sets the current position to -1 to indicate
          * no component and returns false. Passing a non-negative index value for a DynAny that does not
          * have a component at the corresponding position sets the current position to -1 and returns false.
          */
       case 48:  // DynamicAny/DynAny/seek
       {
         int index = in.read_long ();
         boolean $result = false;
         $result = this.seek (index);
         out = $rh.createReply();
         out.write_boolean ($result);
         break;
       }


  /**
          * Is equivalent to seek(0).
          */
       case 49:  // DynamicAny/DynAny/rewind
       {
         this.rewind ();
         out = $rh.createReply();
         break;
       }


  /**
          * Advances the current position to the next component.
          * The operation returns true while the resulting current position indicates a component, false otherwise.
          * A false return value leaves the current position at -1.
          * Invoking next on a DynAny without components leaves the current position at -1 and returns false.
          */
       case 50:  // DynamicAny/DynAny/next
       {
         boolean $result = false;
         $result = this.next ();
         out = $rh.createReply();
         out.write_boolean ($result);
         break;
       }


  /**
          * Returns the number of components of a DynAny.
          * For a DynAny without components, it returns zero.
          * The operation only counts the components at the top level.
          * For example, if component_count is invoked on a DynStruct with a single member,
          * the return value is 1, irrespective of the type of the member.
          * <UL>
          * <LI>For sequences, the operation returns the current number of elements.
          * <LI>For structures, exceptions, and value types, the operation returns the number of members.
          * <LI>For arrays, the operation returns the number of elements.
          * <LI>For unions, the operation returns 2 if the discriminator indicates that a named member is active,
          * otherwise, it returns 1.
          * <LI>For DynFixed and DynEnum, the operation returns zero.
          * </UL>
          */
       case 51:  // DynamicAny/DynAny/component_count
       {
         int $result = (int)0;
         $result = this.component_count ();
         out = $rh.createReply();
         out.write_ulong ($result);
         break;
       }


  /**
          * Returns the DynAny for the component at the current position.
          * It does not advance the current position, so repeated calls to current_component
          * without an intervening call to rewind, next, or seek return the same component.
          * The returned DynAny object reference can be used to get/set the value of the current component.
          * If the current component represents a complex type, the returned reference can be narrowed
          * based on the TypeCode to get the interface corresponding to the to the complex type.
          * Calling current_component on a DynAny that cannot have components,
          * such as a DynEnum or an empty exception, raises TypeMismatch.
          * Calling current_component on a DynAny whose current position is -1 returns a nil reference.
          * The iteration operations, together with current_component, can be used
          * to dynamically compose an any value. After creating a dynamic any, such as a DynStruct,
          * current_component and next can be used to initialize all the components of the value.
          * Once the dynamic value is completely initialized, to_any creates the corresponding any value.
          *
          * @exception TypeMismatch If called on a DynAny that cannot have components,
          * such as a DynEnum or an empty exception
          */
       case 52:  // DynamicAny/DynAny/current_component
       {
         try {
           org.omg.DynamicAny.DynAny $result = null;
           $result = this.current_component ();
           out = $rh.createReply();
           org.omg.DynamicAny.DynAnyHelper.write (out, $result);
         } catch (org.omg.DynamicAny.DynAnyPackage.TypeMismatch $ex) {
           out = $rh.createExceptionReply ();
           org.omg.DynamicAny.DynAnyPackage.TypeMismatchHelper.write (out, $ex);
         }
         break;
       }

       default:
         throw new org.omg.CORBA.BAD_OPERATION (0, org.omg.CORBA.CompletionStatus.COMPLETED_MAYBE);
    }

    return out;
  } // _invoke

  // Type-specific CORBA::Object operations
  private static String[] __ids = {
    "IDL:omg.org/DynamicAny/DynValueCommon:1.0", 
    "IDL:omg.org/DynamicAny/DynAny:1.0"};

  public String[] _all_interfaces (org.omg.PortableServer.POA poa, byte[] objectId)
  {
    return (String[])__ids.clone ();
  }

  public DynValueCommon _this() 
  {
    return DynValueCommonHelper.narrow(
    super._this_object());
  }

  public DynValueCommon _this(org.omg.CORBA.ORB orb) 
  {
    return DynValueCommonHelper.narrow(
    super._this_object(orb));
  }


} // class DynValueCommonPOA
